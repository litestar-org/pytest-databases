[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

####################
# Project Metadata #
####################

[project]
description = 'Reusable database fixtures for any and all databases.'
license = "MIT"
name = "pytest-databases"
readme = "README.md"
requires-python = ">=3.8"
version = "0.8.0"
#
authors = [{ name = "Cody Fincher", email = "cody.fincher@gmail.com" }]
keywords = [
  "database",
  "migration",
  "postgres",
  "mysql",
  "oracle",
  "mssql",
  "duckdb",
  "bigquery",
  "spanner",
  "alloydb",
  "alloydbomni",
  "cockroachdb",
  "redis",
  "elasticsearch",
]
# options under https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
# direct dependencies of this package
dependencies = ["pytest"]

[project.urls]
Documentation = "https://github.com/litestar-org/pytest-databases#readme"
Issues = "https://github.com/litestar-org/pytest-databases/issues"
Source = "https://github.com/litestar-org/pytest-databases"

[project.optional-dependencies]
azure-storage = ["azure-storage-blob"]
bigquery = ["google-cloud-bigquery"]
cockroachdb = ["psycopg"]
dragonfly = ["redis"]
elasticsearch7 = ["elasticsearch7[async]"]
elasticsearch8 = ["elasticsearch8[async]"]
keydb = ["redis"]
mssql = ["aioodbc"]
mysql = ["asyncmy>=0.2.9"]
oracle = ["oracledb"]
postgres = ["asyncpg>=0.29.0"]
redis = ["redis"]
spanner = ["google-cloud-spanner"]
sqlite = ["aiosqlite"]


######################
# Build & Versioning #
######################
[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/docs"]

[tool.hatch.metadata]
allow-direct-references = true

#####################
# Environment Setup #
#####################


# Default environment with production dependencies
[tool.hatch.envs.default]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  # lint
  "mypy",
  "ruff",
  "pylint",
  "pre-commit",
  "types-click",
  "types-six",
  "types-decorator",
  "types-pyyaml",
  "asyncpg-stubs",
  "types-docutils",
  "types-redis",
  # docs
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
]
installer = "uv"
python = "3.12"


# Test environment with test-only dependencies
[tool.hatch.envs.test]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  # lint
  "mypy",
  "ruff",
  "pylint",
  "pre-commit",
  "types-click",
  "types-six",
  "types-decorator",
  "types-pyyaml",
  "asyncpg-stubs",
  "types-docutils",
  "types-redis",
  # docs
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
]
features = [
  "oracle",
  "mysql",
  "mssql",
  "postgres",
  "spanner",
  "cockroachdb",
  "spanner",
  "redis",
  "elasticsearch7",
  "elasticsearch8",
  "bigquery",
  "azure-storage",
]
template = "default"
type = "virtual"

[tool.hatch.envs.test.env-vars]
PYTHONPATH = ".:src/"
PYTHONUNBUFFERED = "1"
SOURCE_DATE_EPOCH = "1580601600"

# Test matrix for various Python versions replacing the functionality of tox
[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.test.scripts]
cov = "pytest --cov=pytest_databases --cov-report=xml"
debug = "cov --no-cov -s --pdb --pdbcls=IPython.core.debugger:Pdb"
no-cov = "cov --no-cov"


# Docs environment
[tool.hatch.envs.docs]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  # lint
  "mypy",
  "ruff",
  "pylint",
  "pre-commit",
  "types-click",
  "types-six",
  "types-decorator",
  "types-pyyaml",
  "asyncpg-stubs",
  "types-docutils",
  "types-redis",
  # docs
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
]
features = [
  "oracle",
  "mysql",
  "mssql",
  "postgres",
  "spanner",
  "cockroachdb",
  "spanner",
  "redis",
  "elasticsearch7",
  "elasticsearch8",
  "bigquery",
]
python = "3.11"
template = "default"
type = "virtual"

[tool.hatch.envs.docs.env-vars]
PYTHONPATH = "."
PYTHONUNBUFFERED = "1"
SOURCE_DATE_EPOCH = "1580601600"
[tool.hatch.envs.docs.scripts]
build = "sphinx-build -M html docs docs/_build/ -E -a -j auto --keep-going"
serve = "sphinx-autobuild docs docs/_build/ -j auto --watch pytest_databases --watch docs --watch tests --watch CONTRIBUTING.rst --port 8002 {args}"
# --ignore-url=None since the SUMMARY.md file leaves a <toc>None</toc> in sitemap.xml
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = ["build", "validate"]

[tool.hatch.envs.local]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  # lint
  "mypy",
  "ruff",
  "pylint",
  "pre-commit",
  "types-click",
  "types-six",
  "types-decorator",
  "types-pyyaml",
  "asyncpg-stubs",
  "types-docutils",
  "types-redis",
  # docs
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
]
features = [
  "oracle",
  "mysql",
  "mssql",
  "postgres",
  "cockroachdb",
  "spanner",
  "redis",
  "elasticsearch7",
  "elasticsearch8",
  "bigquery",
]
path = ".venv/"
python = "3.11"
template = "docs"
type = "virtual"


# Lint environment
[tool.hatch.envs.lint]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  # lint
  "mypy",
  "ruff",
  "pylint",
  "pre-commit",
  "types-click",
  "types-six",
  "types-decorator",
  "types-pyyaml",
  "asyncpg-stubs",
  "types-docutils",
  "types-redis",
  # docs
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
]
python = "3.12"
type = "virtual"

[tool.hatch.envs.lint.scripts]
check = ["style", "typing"]
fix = [
  "typing",
  "ruff format {args:.}",
  "ruff check --fix {args:.}",
  "style",                      # feedback on what is not fixable
  "pre-commit run --all-files",
]
style = ["echo \"VERSION: `ruff --version`\"", "ruff check {args:.}", "ruff format --check {args:.}"]
typing = ["echo \"VERSION: `mypy --version`\"", "mypy --install-types --non-interactive {args}"]


##################
# External Tools #
##################

## Linting Tools

[tool.slotscheck]
strict-imports = false

[tool.codespell]
ignore-words-list = "alog"
skip = 'pdm.lock, package-lock.json'

[tool.pyright]
exclude = ["scripts", "docs"]
include = ["src/pytest_databases", "tests"]


[tool.git-cliff.changelog]
body = """
{% if version %}\
    `Release [v{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} <https://github.com/litestar-org/pytest-databases/releases/tag/v{{ version | trim_start_matches(pat="v") }}>`_
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    * `See All commits in v{{ version | trim_start_matches(pat="v") }} <https://github.com/litestar-org/pytest-databases/commits/v{{ version | trim_start_matches(pat="v") }}>`_
{% else %}\
    [unreleased]
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        `{{ previous.commit_id | truncate(length=7, end="") }} <https://github.com/litestar-org/pytest-databases/commit/{{ previous.commit_id }}>`_ ... \
            `{{ commit_id | truncate(length=7, end="") }} <https://github.com/litestar-org/pytest-databases/commit/{{ commit_id }}>`_ \
            | `See diff for {{ version | trim_start_matches(pat="v") }} <https://github.com/litestar-org/pytest-databases/compare/{{ previous.commit_id }}...{{ commit_id }}>`_
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {{ group | upper_first }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {% for commit in commits %}
        * (`{{ commit.id | truncate(length=7, end="") }} <https://github.com/litestar-org/pytest-databases/commit/{{ commit.id }}>`_) {% if commit.breaking %}[**breaking**] {% endif %} - {{ commit.message | upper_first }} ({{ commit.author.name  }})\
          {% for footer in commit.footers -%}
            , {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}\n
"""
footer = """
Pytest Databases Changelog
"""
header = """
=========
Changelog
=========\n
All commits to this project will be documented in this file.\n
"""
trim = true

[tool.git-cliff.git]
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
]
conventional_commits = true
filter_commits = false
filter_unconventional = true
ignore_tags = ""
protect_breaking_commits = false
skip_tags = "v0.1.0-beta.1"
sort_commits = "oldest"
split_commits = false
tag_pattern = "v[0-9]*"
topo_order = false

[tool.mypy]
disallow_untyped_defs = false
files = ["src/pytest_databases", "tests"]
follow_imports = "normal"                 # "silent" for not following
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[[tool.mypy.overrides]]
disable_error_code = "attr-defined"
module = "pytest_databases.docker.spanner"

[[tool.mypy.overrides]]
disable_error_code = "attr-defined"
module = "pytest_databases.docker.bigquery"

[[tool.mypy.overrides]]
disable_error_code = "attr-defined"
disallow_untyped_decorators = false
module = "tests.*"
warn_unused_ignores = false

[[tool.mypy.overrides]]
disable_error_code = ["arg-type"]
disallow_untyped_calls = false
disallow_untyped_decorators = false
module = ["docutils.nodes.*"]


[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "asyncmy",
  "pyodbc",
  "google.auth.*",
  "google.cloud.*",
  "google.protobuf.*",
  "googleapiclient",
  "googleapiclient.*",
]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
]
fix = true
include = ["src/**/*.py", "src/**/*.pyi", "tests/**/*.py", "tests/**/*.pyi"]
line-length = 120
lint.fixable = ["ALL"]
lint.ignore = [
  "B027",   # Allow non-abstract empty methods in abstract base classes
  "FBT003", # Allow boolean positional values in function calls, like `dict.get(... True)`
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "PLC1901", # empty string comparisons
  "PLW2901", # `for` loop variable overwritten
  "SIM114",  # Combine `if` branches using logical `or` operator
  "E203",    # Whitespace before :, needed for black compatability and also `ruff format`
  "ISC001",  # causes unexpected behaviour with formatter
  "E501",    # pycodestyle line too long, handled by black
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037",   # pyupgrade - removes quotes from type annotation
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "B008",    #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "ANN102",
  "ANN101",  # ruff - Missing type annotation for `self` in method
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001",  # Boolean typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "FBT003",  # Boolean Boolean default positional argument in function definition
  "ARG002",  # Unused method argument
  "ARG001",  # Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "RUF029",  # Ruff - Function is declared `async`, but doesn't `await` or use `async` features. # ignore
  "SLF001",
  "PT007",
  'PT004',
  'PT005',
  'S603',
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "ANN102",
  "ANN101",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "PERF203", # ignore for now; investigate
  "COM812",
  "PLR0917",
  "CPY001",  # copywrite check
  "DOC201",  # `return` is not documented in docstring
  "DOC501",  # Raised exception missing from docstring
  "DOC502",  # Raised exception missing from docstring
  "A005",    # module shadows builtin
]
lint.select = ["ALL"]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
preview = true                                                    # preview features & checks, use with caution
src = ["src", "tests/", "docs/"]
target-version = "py38"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["pytest_databases", "tests"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Allow print/pprint
"__init__.py" = ['F401', 'D104']
"__main__.py" = ["E402"]
"docs/*" = ["S404", "INP001"]
"examples/*" = ["T201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = [
  "PLR2004",
  "S101",
  "TID252",
  "ERA001",
  "ANN201",
  "ANN001",
  "D103",
  "D104",
  "T201",
  "S404",
  "PLR6301",
  "FA102",
]


[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

# configure in-case someone runs this
[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

## Testing Tools

[tool.pytest.ini_options]
addopts = "--dist loadfile -n 2 -ra -q --doctest-glob='*.md'"
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:xdist.*",
  "ignore::DeprecationWarning:importlib._bootstrap",
]
markers = [
  "mysql: MySQL Tests",
  "postgres: Postgres Tests",
  "oracle: Oracle Tests",
  "spanner: Google Cloud Spanner Tests",
  "duckdb: DuckDB Tests",
  "mssql: Microsoft SQL Server Tests",
  "elasticsearch: Elasticsearch Tests",
]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
disable_warnings = ["no-data-collected", "module-not-measured", "module-not-imported"]
omit = [
  "_version.py",                          # automatically created by hatch-vcs, not in repo
  "src/pytest_databases/__metadata__.py",
  "tests/*",
  "scripts/*",
]
parallel = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
